<form id="writer-form" class="writer-form">
  <div class="form-group">
    <label for="writer-label">Label</label>
    <input type="text" id="writer-label" name="label" required placeholder="Writer name">
  </div>
  
  <div class="form-group">
    <label for="writer-ttl">Time-to-Live (seconds, optional)</label>
    <input type="number" id="writer-ttl" name="ttl" placeholder="86400 (1 day)">
  </div>
  
  <div class="form-actions">
    <button type="submit" class="button">Create Writer Capability</button>
  </div>
</form>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('writer-form');
    const endpoint = location.href + '/write';
    
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const payload = {
        label: formData.get('label'),
        ttl: formData.get('ttl') ? parseInt(formData.get('ttl'), 10) : undefined
      };
      
      try {
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(payload)
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || 'Failed to create writer capability');
        }
        
        const data = await response.json();
        
        // Show success message with the capability URL
        const resultElement = document.createElement('div');
        resultElement.className = 'result success';
        resultElement.innerHTML = `
          <h3>Writer Capability Created!</h3>
          <p><strong>Writer ID:</strong> ${data.writerCapId}</p>
          <p><a href="${data.capabilityUrl}" target="_blank" class="button">Open Capability URL</a></p>
        `;
        
        // Insert result after the form
        form.parentNode.insertBefore(resultElement, form.nextSibling);
        
        // Reset form
        form.reset();
        
      } catch (error) {
        console.error('Error creating writer capability:', error);
        
        // Show error message
        const resultElement = document.createElement('div');
        resultElement.className = 'result error';
        resultElement.innerHTML = `
          <h3>Error</h3>
          <p>${error.message}</p>
        `;
        
        // Insert error after the form
        form.parentNode.insertBefore(resultElement, form.nextSibling);
      }
    });
  });
</script>

<style>
  .writer-form {
    max-width: 600px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    border: 1px solid #eee;
  }
  
  .form-group {
    margin-bottom: 16px;
  }
  
  label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
  }
  
  input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ccc;
    border-radius: 4px;
  }
  
  .form-actions {
    margin-top: 24px;
  }
  
  .result {
    margin-top: 20px;
    padding: 16px;
    border-radius: 8px;
  }
  
  .result.success {
    background-color: #e6ffe6;
    border: 1px solid #99cc99;
  }
  
  .result.error {
    background-color: #ffe6e6;
    border: 1px solid #cc9999;
  }
</style>